<div class="container">
  <div class="blog">
      <h1>tdd your life</h1>
      <br>
      <p style="text-align:center;font-size:35px;font-family:Sacramento,cursive;"><span style="text-decoration:underline;">T</span>est <span style="text-decoration:underline;">D</span>riven <span style="text-decoration:underline;">D</span>evelopment</p>
      <p>
        tdd. those three letters alone are enough to send shivers up my spine. it’s the necessary evil of software development. a tedious process that seemingly inhibits the gushing cascade of code genius streaming from my fingertips (a curious delusion in itself, since that’s never the case).
      </p>
      <p>
        however, underneath this imposing exterior lies a golden lifesaver. a safety net in tempestuous seas of ugly, demented, thrashing methods and 60-ft high, breaching classes.
      </p>
      <p>
        i’m (retrospectively) thrilled at the emphasis that <a href="https://www.turing.io" target="_blank">Turing</a> (my code school) put on tdd. the concept is simple, yet powerful. iteratively test your code as you write it. use these tests to guide debugging as your code grows complex and unwieldy.
      </p>
      <br>
    <div class="col-md-6">
      <img src="./assets/2.png" alt="tdd background">
    </div>
    <div class="col-md-6">
      <img src="./assets/1.png" alt="more tdd background">
    </div>
    <div class="col-md-12">
      <br>
      <p>
        there is much more to the tdd philosophy. if you’re interested in further information about the concept, here’s a <a href="https://www.google.com/search?q=tdd" target="_blank">google</a>.
      </p>
      <h2 class="titled">tdd is an extraordinarily effective tool for building efficient, clean, and beautiful code. so, what would it look like if you applied tdd to your life?</h2>
      <br>
      <p>literally. establish a test file for your life. start with the basics.</p>
      <h3 class="titled">for example</h3>
      <div style="margin-left:5%;font-weight:900;">
        <p>def test_that_nick_is_fit</p>
        <p style="margin-left:25px;">assert_equal 0.5 miles, Nick.swim_for_30_mins</p>
        <p>end</p>
      </div>
      <p>
        let’s create a basic outline of what the testing cycle looks like . . .
      </p>
    </div>
    <img src="./assets/3.png" alt="tdd your life rules"  style="margin-left:20%;height:325px;width:auto;">
    <h3 class="titled">thoughts on test design</h3>
    <p>
      keep your goals SMART (specific, measurable, acheivable, realistic, time-based). inevitably, the situation will arise where a test needs to be skipped, adjusted or deleted. it’s on you to maintain the integrity of your test file. I hope to find that sweet spot between challenging myself mentally and physically, without sacrificing consistency.
    </p>
    <p>
      tdd your life could be a horrible, fantastic, or moot idea. there’s only one way to find out!
    </p>
    <p>
      here’s my first test. an easy victory before I start to push myself.
    </p>
    <img src="./assets/4.png" alt="my first tdd for life testfile" style="margin-left:12%;">
    <br>
    <br>
    <p>
      if you have a couple of tests rattling around your skull right now, write one down. right now. before you finish reading this blog. and join me on this experimenture (experiment/adventure). i’d love to hear the kinds of tests you’re writing, how they are going, and any tweaks/flaws/improvements you discover.
    </p>
    <p>
      thinking through life's challenges can be surprisingly enlightening when you put on software-developer tinted glasses. similar and abundant examples can be found in the book <a href="https://www.amazon.com/Algorithms-Live-Computer-Science-Decisions/dp/1480560367" style="font-weight:900;" target="_blank"> Algorithms to Live By</a>. the most thought-provoking book I’ve read recently, I cannot recommend a read-through highly enough.
    </p>   
  </div>
</div>